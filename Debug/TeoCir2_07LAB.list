
TeoCir2_07LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001570  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800171c  0800171c  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800171c  0800171c  0001171c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001720  08001720  00011720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000040  20000000  08001724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020040  2**0
                  CONTENTS
  7 .bss          00000098  20000040  20000040  00020040  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000d8  200000d8  00020040  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007678  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000107c  00000000  00000000  000276e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008c8  00000000  00000000  00028768  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000820  00000000  00000000  00029030  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002ce2  00000000  00000000  00029850  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003052  00000000  00000000  0002c532  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002f584  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000262c  00000000  00000000  0002f600  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000040 	.word	0x20000040
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001704 	.word	0x08001704

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000044 	.word	0x20000044
 80001e8:	08001704 	.word	0x08001704

080001ec <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001f4:	2300      	movs	r3, #0
 80001f6:	73fb      	strb	r3, [r7, #15]
 80001f8:	2300      	movs	r3, #0
 80001fa:	73bb      	strb	r3, [r7, #14]
 80001fc:	230f      	movs	r3, #15
 80001fe:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	78db      	ldrb	r3, [r3, #3]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d039      	beq.n	800027c <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000208:	4b27      	ldr	r3, [pc, #156]	; (80002a8 <NVIC_Init+0xbc>)
 800020a:	68db      	ldr	r3, [r3, #12]
 800020c:	43db      	mvns	r3, r3
 800020e:	0a1b      	lsrs	r3, r3, #8
 8000210:	b2db      	uxtb	r3, r3
 8000212:	f003 0307 	and.w	r3, r3, #7
 8000216:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000218:	7bfb      	ldrb	r3, [r7, #15]
 800021a:	f1c3 0304 	rsb	r3, r3, #4
 800021e:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000220:	7b7a      	ldrb	r2, [r7, #13]
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	fa42 f303 	asr.w	r3, r2, r3
 8000228:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	785b      	ldrb	r3, [r3, #1]
 800022e:	461a      	mov	r2, r3
 8000230:	7bbb      	ldrb	r3, [r7, #14]
 8000232:	fa02 f303 	lsl.w	r3, r2, r3
 8000236:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	789a      	ldrb	r2, [r3, #2]
 800023c:	7b7b      	ldrb	r3, [r7, #13]
 800023e:	4013      	ands	r3, r2
 8000240:	b2da      	uxtb	r2, r3
 8000242:	7bfb      	ldrb	r3, [r7, #15]
 8000244:	4313      	orrs	r3, r2
 8000246:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000248:	7bfb      	ldrb	r3, [r7, #15]
 800024a:	011b      	lsls	r3, r3, #4
 800024c:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800024e:	4a17      	ldr	r2, [pc, #92]	; (80002ac <NVIC_Init+0xc0>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	4413      	add	r3, r2
 8000256:	7bfa      	ldrb	r2, [r7, #15]
 8000258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800025c:	4a13      	ldr	r2, [pc, #76]	; (80002ac <NVIC_Init+0xc0>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	095b      	lsrs	r3, r3, #5
 8000264:	b2db      	uxtb	r3, r3
 8000266:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	f003 031f 	and.w	r3, r3, #31
 8000270:	2101      	movs	r1, #1
 8000272:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000276:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800027a:	e00f      	b.n	800029c <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800027c:	490b      	ldr	r1, [pc, #44]	; (80002ac <NVIC_Init+0xc0>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	095b      	lsrs	r3, r3, #5
 8000284:	b2db      	uxtb	r3, r3
 8000286:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	f003 031f 	and.w	r3, r3, #31
 8000290:	2201      	movs	r2, #1
 8000292:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000294:	f100 0320 	add.w	r3, r0, #32
 8000298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800029c:	bf00      	nop
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	e000ed00 	.word	0xe000ed00
 80002ac:	e000e100 	.word	0xe000e100

080002b0 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002d2:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	791b      	ldrb	r3, [r3, #4]
 80002d8:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002de:	4313      	orrs	r3, r2
 80002e0:	68fa      	ldr	r2, [r7, #12]
 80002e2:	4313      	orrs	r3, r2
 80002e4:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	68fa      	ldr	r2, [r7, #12]
 80002ea:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80002f2:	68fa      	ldr	r2, [r7, #12]
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <ADC_Init+0xa8>)
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000302:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000308:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	795b      	ldrb	r3, [r3, #5]
 800030e:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000310:	4313      	orrs	r3, r2
 8000312:	68fa      	ldr	r2, [r7, #12]
 8000314:	4313      	orrs	r3, r2
 8000316:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000322:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800032a:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	7d1b      	ldrb	r3, [r3, #20]
 8000330:	3b01      	subs	r3, #1
 8000332:	b2da      	uxtb	r2, r3
 8000334:	7afb      	ldrb	r3, [r7, #11]
 8000336:	4313      	orrs	r3, r2
 8000338:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800033a:	7afb      	ldrb	r3, [r7, #11]
 800033c:	051b      	lsls	r3, r3, #20
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	4313      	orrs	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800034a:	bf00      	nop
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	c0fff7fd 	.word	0xc0fff7fd

0800035c <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2200      	movs	r2, #0
 800036e:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2200      	movs	r2, #0
 8000374:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	2201      	movs	r2, #1
 800038c:	751a      	strb	r2, [r3, #20]
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
	...

0800039c <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80003a8:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <ADC_CommonInit+0x48>)
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80003ae:	68fa      	ldr	r2, [r7, #12]
 80003b0:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <ADC_CommonInit+0x4c>)
 80003b2:	4013      	ands	r3, r2
 80003b4:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80003be:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80003c4:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80003ca:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80003cc:	68fa      	ldr	r2, [r7, #12]
 80003ce:	4313      	orrs	r3, r2
 80003d0:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80003d2:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <ADC_CommonInit+0x48>)
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	6053      	str	r3, [r2, #4]
}
 80003d8:	bf00      	nop
 80003da:	3714      	adds	r7, #20
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	40012300 	.word	0x40012300
 80003e8:	fffc30e0 	.word	0xfffc30e0

080003ec <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2200      	movs	r2, #0
 80003fe:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2200      	movs	r2, #0
 800040a:	60da      	str	r2, [r3, #12]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	460b      	mov	r3, r1
 8000422:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000424:	78fb      	ldrb	r3, [r7, #3]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d006      	beq.n	8000438 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	689b      	ldr	r3, [r3, #8]
 800042e:	f043 0201 	orr.w	r2, r3, #1
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000436:	e005      	b.n	8000444 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	f023 0201 	bic.w	r2, r3, #1
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	609a      	str	r2, [r3, #8]
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr

08000450 <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000450:	b480      	push	{r7}
 8000452:	b087      	sub	sp, #28
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	4608      	mov	r0, r1
 800045a:	4611      	mov	r1, r2
 800045c:	461a      	mov	r2, r3
 800045e:	4603      	mov	r3, r0
 8000460:	70fb      	strb	r3, [r7, #3]
 8000462:	460b      	mov	r3, r1
 8000464:	70bb      	strb	r3, [r7, #2]
 8000466:	4613      	mov	r3, r2
 8000468:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	2300      	movs	r3, #0
 8000470:	613b      	str	r3, [r7, #16]
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000476:	78fb      	ldrb	r3, [r7, #3]
 8000478:	2b09      	cmp	r3, #9
 800047a:	d923      	bls.n	80004c4 <ADC_InjectedChannelConfig+0x74>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8000482:	78fb      	ldrb	r3, [r7, #3]
 8000484:	f1a3 020a 	sub.w	r2, r3, #10
 8000488:	4613      	mov	r3, r2
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	4413      	add	r3, r2
 800048e:	2207      	movs	r2, #7
 8000490:	fa02 f303 	lsl.w	r3, r2, r3
 8000494:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000496:	693b      	ldr	r3, [r7, #16]
 8000498:	43db      	mvns	r3, r3
 800049a:	697a      	ldr	r2, [r7, #20]
 800049c:	4013      	ands	r3, r2
 800049e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 80004a0:	7879      	ldrb	r1, [r7, #1]
 80004a2:	78fb      	ldrb	r3, [r7, #3]
 80004a4:	f1a3 020a 	sub.w	r2, r3, #10
 80004a8:	4613      	mov	r3, r2
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	4413      	add	r3, r2
 80004ae:	fa01 f303 	lsl.w	r3, r1, r3
 80004b2:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80004b4:	697a      	ldr	r2, [r7, #20]
 80004b6:	693b      	ldr	r3, [r7, #16]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	697a      	ldr	r2, [r7, #20]
 80004c0:	60da      	str	r2, [r3, #12]
 80004c2:	e01e      	b.n	8000502 <ADC_InjectedChannelConfig+0xb2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	691b      	ldr	r3, [r3, #16]
 80004c8:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80004ca:	78fa      	ldrb	r2, [r7, #3]
 80004cc:	4613      	mov	r3, r2
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	4413      	add	r3, r2
 80004d2:	2207      	movs	r2, #7
 80004d4:	fa02 f303 	lsl.w	r3, r2, r3
 80004d8:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	43db      	mvns	r3, r3
 80004de:	697a      	ldr	r2, [r7, #20]
 80004e0:	4013      	ands	r3, r2
 80004e2:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80004e4:	7879      	ldrb	r1, [r7, #1]
 80004e6:	78fa      	ldrb	r2, [r7, #3]
 80004e8:	4613      	mov	r3, r2
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	4413      	add	r3, r2
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80004f4:	697a      	ldr	r2, [r7, #20]
 80004f6:	693b      	ldr	r3, [r7, #16]
 80004f8:	4313      	orrs	r3, r2
 80004fa:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	697a      	ldr	r2, [r7, #20]
 8000500:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000506:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	0d1b      	lsrs	r3, r3, #20
 800050c:	f003 0303 	and.w	r3, r3, #3
 8000510:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	78ba      	ldrb	r2, [r7, #2]
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	b2db      	uxtb	r3, r3
 800051c:	3302      	adds	r3, #2
 800051e:	b2db      	uxtb	r3, r3
 8000520:	461a      	mov	r2, r3
 8000522:	4613      	mov	r3, r2
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	4413      	add	r3, r2
 8000528:	221f      	movs	r2, #31
 800052a:	fa02 f303 	lsl.w	r3, r2, r3
 800052e:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	43db      	mvns	r3, r3
 8000534:	697a      	ldr	r2, [r7, #20]
 8000536:	4013      	ands	r3, r2
 8000538:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 800053a:	78fa      	ldrb	r2, [r7, #3]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	78b9      	ldrb	r1, [r7, #2]
 8000542:	1acb      	subs	r3, r1, r3
 8000544:	b2db      	uxtb	r3, r3
 8000546:	3302      	adds	r3, #2
 8000548:	b2db      	uxtb	r3, r3
 800054a:	4619      	mov	r1, r3
 800054c:	460b      	mov	r3, r1
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	440b      	add	r3, r1
 8000552:	fa02 f303 	lsl.w	r3, r2, r3
 8000556:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8000558:	697a      	ldr	r2, [r7, #20]
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	4313      	orrs	r3, r2
 800055e:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	697a      	ldr	r2, [r7, #20]
 8000564:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000566:	bf00      	nop
 8000568:	371c      	adds	r7, #28
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 8000572:	b480      	push	{r7}
 8000574:	b085      	sub	sp, #20
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
 800057a:	460b      	mov	r3, r1
 800057c:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800058a:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000592:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8000594:	78fb      	ldrb	r3, [r7, #3]
 8000596:	3b01      	subs	r3, #1
 8000598:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	051b      	lsls	r3, r3, #20
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b085      	sub	sp, #20
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	460b      	mov	r3, r1
 80005c0:	70fb      	strb	r3, [r7, #3]
 80005c2:	4613      	mov	r3, r2
 80005c4:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 80005ce:	78fa      	ldrb	r2, [r7, #3]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4413      	add	r3, r2
 80005d4:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	461a      	mov	r2, r3
 80005da:	883b      	ldrh	r3, [r7, #0]
 80005dc:	6013      	str	r3, [r2, #0]
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	609a      	str	r2, [r3, #8]
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 800060a:	b480      	push	{r7}
 800060c:	b085      	sub	sp, #20
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	460b      	mov	r3, r1
 8000614:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 800061e:	78fa      	ldrb	r2, [r7, #3]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	3328      	adds	r3, #40	; 0x28
 8000626:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	b29b      	uxth	r3, r3
}
 800062e:	4618      	mov	r0, r3
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 800063a:	b480      	push	{r7}
 800063c:	b085      	sub	sp, #20
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	460b      	mov	r3, r1
 8000644:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8000646:	2300      	movs	r3, #0
 8000648:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	78fb      	ldrb	r3, [r7, #3]
 8000650:	4013      	ands	r3, r2
 8000652:	2b00      	cmp	r3, #0
 8000654:	d002      	beq.n	800065c <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000656:	2301      	movs	r3, #1
 8000658:	73fb      	strb	r3, [r7, #15]
 800065a:	e001      	b.n	8000660 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 800065c:	2300      	movs	r3, #0
 800065e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000660:	7bfb      	ldrb	r3, [r7, #15]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	460b      	mov	r3, r1
 8000678:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 800067a:	78fb      	ldrb	r3, [r7, #3]
 800067c:	43da      	mvns	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	601a      	str	r2, [r3, #0]
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
	...

08000690 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <DAC_Init+0x64>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 80006a8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	fa02 f303 	lsl.w	r3, r2, r3
 80006b2:	43db      	mvns	r3, r3
 80006b4:	68fa      	ldr	r2, [r7, #12]
 80006b6:	4013      	ands	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	689b      	ldr	r3, [r3, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80006c8:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_OutputBuffer);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	68db      	ldr	r3, [r3, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80006ce:	4313      	orrs	r3, r2
 80006d0:	60bb      	str	r3, [r7, #8]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	4313      	orrs	r3, r2
 80006de:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 80006e0:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <DAC_Init+0x64>)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	6013      	str	r3, [r2, #0]
}
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40007400 	.word	0x40007400

080006f8 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000704:	78fb      	ldrb	r3, [r7, #3]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d009      	beq.n	800071e <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 800070a:	490d      	ldr	r1, [pc, #52]	; (8000740 <DAC_Cmd+0x48>)
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <DAC_Cmd+0x48>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	2001      	movs	r0, #1
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	fa00 f303 	lsl.w	r3, r0, r3
 8000718:	4313      	orrs	r3, r2
 800071a:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 800071c:	e009      	b.n	8000732 <DAC_Cmd+0x3a>
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 800071e:	4908      	ldr	r1, [pc, #32]	; (8000740 <DAC_Cmd+0x48>)
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <DAC_Cmd+0x48>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	2001      	movs	r0, #1
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	fa00 f303 	lsl.w	r3, r0, r3
 800072c:	43db      	mvns	r3, r3
 800072e:	4013      	ands	r3, r2
 8000730:	600b      	str	r3, [r1, #0]
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40007400 	.word	0x40007400

08000744 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	460b      	mov	r3, r1
 800074e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <DAC_SetChannel2Data+0x34>)
 8000756:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	3314      	adds	r3, #20
 8000760:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	461a      	mov	r2, r3
 8000766:	887b      	ldrh	r3, [r7, #2]
 8000768:	6013      	str	r3, [r2, #0]
}
 800076a:	bf00      	nop
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40007400 	.word	0x40007400

0800077c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800077c:	b480      	push	{r7}
 800077e:	b087      	sub	sp, #28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	e076      	b.n	8000886 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000798:	2201      	movs	r2, #1
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	fa02 f303 	lsl.w	r3, r2, r3
 80007a0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	4013      	ands	r3, r2
 80007aa:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80007ac:	68fa      	ldr	r2, [r7, #12]
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d165      	bne.n	8000880 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	2103      	movs	r1, #3
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	43db      	mvns	r3, r3
 80007c4:	401a      	ands	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	791b      	ldrb	r3, [r3, #4]
 80007d2:	4619      	mov	r1, r3
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	fa01 f303 	lsl.w	r3, r1, r3
 80007dc:	431a      	orrs	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	791b      	ldrb	r3, [r3, #4]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d003      	beq.n	80007f2 <GPIO_Init+0x76>
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	791b      	ldrb	r3, [r3, #4]
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d12e      	bne.n	8000850 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	689a      	ldr	r2, [r3, #8]
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	2103      	movs	r1, #3
 80007fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000800:	43db      	mvns	r3, r3
 8000802:	401a      	ands	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	689a      	ldr	r2, [r3, #8]
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	795b      	ldrb	r3, [r3, #5]
 8000810:	4619      	mov	r1, r3
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	431a      	orrs	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	685a      	ldr	r2, [r3, #4]
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	b29b      	uxth	r3, r3
 8000828:	4619      	mov	r1, r3
 800082a:	2301      	movs	r3, #1
 800082c:	408b      	lsls	r3, r1
 800082e:	43db      	mvns	r3, r3
 8000830:	401a      	ands	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	683a      	ldr	r2, [r7, #0]
 800083c:	7992      	ldrb	r2, [r2, #6]
 800083e:	4611      	mov	r1, r2
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	b292      	uxth	r2, r2
 8000844:	fa01 f202 	lsl.w	r2, r1, r2
 8000848:	b292      	uxth	r2, r2
 800084a:	431a      	orrs	r2, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	68da      	ldr	r2, [r3, #12]
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	b29b      	uxth	r3, r3
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	2103      	movs	r1, #3
 800085c:	fa01 f303 	lsl.w	r3, r1, r3
 8000860:	43db      	mvns	r3, r3
 8000862:	401a      	ands	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	68da      	ldr	r2, [r3, #12]
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	79db      	ldrb	r3, [r3, #7]
 8000870:	4619      	mov	r1, r3
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	fa01 f303 	lsl.w	r3, r1, r3
 800087a:	431a      	orrs	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	3301      	adds	r3, #1
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	2b0f      	cmp	r3, #15
 800088a:	d985      	bls.n	8000798 <GPIO_Init+0x1c>
    }
  }
}
 800088c:	bf00      	nop
 800088e:	371c      	adds	r7, #28
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2200      	movs	r2, #0
 80008ac:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2200      	movs	r2, #0
 80008b2:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2200      	movs	r2, #0
 80008b8:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2200      	movs	r2, #0
 80008be:	71da      	strb	r2, [r3, #7]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d006      	beq.n	80008ec <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80008de:	490a      	ldr	r1, [pc, #40]	; (8000908 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80008ea:	e006      	b.n	80008fa <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80008ec:	4906      	ldr	r1, [pc, #24]	; (8000908 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	43db      	mvns	r3, r3
 80008f6:	4013      	ands	r3, r2
 80008f8:	630b      	str	r3, [r1, #48]	; 0x30
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	460b      	mov	r3, r1
 8000916:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000918:	78fb      	ldrb	r3, [r7, #3]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d006      	beq.n	800092c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800091e:	490a      	ldr	r1, [pc, #40]	; (8000948 <RCC_APB1PeriphClockCmd+0x3c>)
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <RCC_APB1PeriphClockCmd+0x3c>)
 8000922:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4313      	orrs	r3, r2
 8000928:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800092a:	e006      	b.n	800093a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800092c:	4906      	ldr	r1, [pc, #24]	; (8000948 <RCC_APB1PeriphClockCmd+0x3c>)
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <RCC_APB1PeriphClockCmd+0x3c>)
 8000930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	43db      	mvns	r3, r3
 8000936:	4013      	ands	r3, r2
 8000938:	640b      	str	r3, [r1, #64]	; 0x40
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000958:	78fb      	ldrb	r3, [r7, #3]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d006      	beq.n	800096c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800095e:	490a      	ldr	r1, [pc, #40]	; (8000988 <RCC_APB2PeriphClockCmd+0x3c>)
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <RCC_APB2PeriphClockCmd+0x3c>)
 8000962:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4313      	orrs	r3, r2
 8000968:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800096a:	e006      	b.n	800097a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800096c:	4906      	ldr	r1, [pc, #24]	; (8000988 <RCC_APB2PeriphClockCmd+0x3c>)
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <RCC_APB2PeriphClockCmd+0x3c>)
 8000970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	43db      	mvns	r3, r3
 8000976:	4013      	ands	r3, r2
 8000978:	644b      	str	r3, [r1, #68]	; 0x44
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800

0800098c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a29      	ldr	r2, [pc, #164]	; (8000a48 <TIM_TimeBaseInit+0xbc>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d013      	beq.n	80009d0 <TIM_TimeBaseInit+0x44>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a28      	ldr	r2, [pc, #160]	; (8000a4c <TIM_TimeBaseInit+0xc0>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d00f      	beq.n	80009d0 <TIM_TimeBaseInit+0x44>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009b6:	d00b      	beq.n	80009d0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a25      	ldr	r2, [pc, #148]	; (8000a50 <TIM_TimeBaseInit+0xc4>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d007      	beq.n	80009d0 <TIM_TimeBaseInit+0x44>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a24      	ldr	r2, [pc, #144]	; (8000a54 <TIM_TimeBaseInit+0xc8>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d003      	beq.n	80009d0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a23      	ldr	r2, [pc, #140]	; (8000a58 <TIM_TimeBaseInit+0xcc>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d108      	bne.n	80009e2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80009d0:	89fb      	ldrh	r3, [r7, #14]
 80009d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009d6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	885a      	ldrh	r2, [r3, #2]
 80009dc:	89fb      	ldrh	r3, [r7, #14]
 80009de:	4313      	orrs	r3, r2
 80009e0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a1d      	ldr	r2, [pc, #116]	; (8000a5c <TIM_TimeBaseInit+0xd0>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d00c      	beq.n	8000a04 <TIM_TimeBaseInit+0x78>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a1c      	ldr	r2, [pc, #112]	; (8000a60 <TIM_TimeBaseInit+0xd4>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d008      	beq.n	8000a04 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80009f2:	89fb      	ldrh	r3, [r7, #14]
 80009f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009f8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	891a      	ldrh	r2, [r3, #8]
 80009fe:	89fb      	ldrh	r3, [r7, #14]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	89fa      	ldrh	r2, [r7, #14]
 8000a08:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	881a      	ldrh	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <TIM_TimeBaseInit+0xbc>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d003      	beq.n	8000a2a <TIM_TimeBaseInit+0x9e>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a09      	ldr	r2, [pc, #36]	; (8000a4c <TIM_TimeBaseInit+0xc0>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d104      	bne.n	8000a34 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	7a9b      	ldrb	r3, [r3, #10]
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2201      	movs	r2, #1
 8000a38:	829a      	strh	r2, [r3, #20]
}
 8000a3a:	bf00      	nop
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40010000 	.word	0x40010000
 8000a4c:	40010400 	.word	0x40010400
 8000a50:	40000400 	.word	0x40000400
 8000a54:	40000800 	.word	0x40000800
 8000a58:	40000c00 	.word	0x40000c00
 8000a5c:	40001000 	.word	0x40001000
 8000a60:	40001400 	.word	0x40001400

08000a64 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a70:	78fb      	ldrb	r3, [r7, #3]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d008      	beq.n	8000a88 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000a86:	e007      	b.n	8000a98 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	f023 0301 	bic.w	r3, r3, #1
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	801a      	strh	r2, [r3, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	807b      	strh	r3, [r7, #2]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ab4:	787b      	ldrb	r3, [r7, #1]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d008      	beq.n	8000acc <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	899b      	ldrh	r3, [r3, #12]
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	887b      	ldrh	r3, [r7, #2]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000aca:	e009      	b.n	8000ae0 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	899b      	ldrh	r3, [r3, #12]
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	887b      	ldrh	r3, [r7, #2]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	4013      	ands	r3, r2
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	819a      	strh	r2, [r3, #12]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000af8:	2300      	movs	r3, #0
 8000afa:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	81bb      	strh	r3, [r7, #12]
 8000b00:	2300      	movs	r3, #0
 8000b02:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	8a1b      	ldrh	r3, [r3, #16]
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	887b      	ldrh	r3, [r7, #2]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	899b      	ldrh	r3, [r3, #12]
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	887b      	ldrh	r3, [r7, #2]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000b1c:	89bb      	ldrh	r3, [r7, #12]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d005      	beq.n	8000b2e <TIM_GetITStatus+0x42>
 8000b22:	897b      	ldrh	r3, [r7, #10]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d002      	beq.n	8000b2e <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	e001      	b.n	8000b32 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000b4c:	887b      	ldrh	r3, [r7, #2]
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	821a      	strh	r2, [r3, #16]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <INIT_ADC>:
		- Pin		Pin del ADC a inicializar. Ej: GPIO_Pin_X
	* @ej
		- INIT_ADC(GPIOX, GPIO_Pin_X);
******************************************************************************/
void INIT_ADC(GPIO_TypeDef* Port, uint16_t Pin)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b092      	sub	sp, #72	; 0x48
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	807b      	strh	r3, [r7, #2]
	uint32_t Clock;
	Clock = FIND_CLOCK(Port);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f000 f944 	bl	8000dfc <FIND_CLOCK>
 8000b74:	6478      	str	r0, [r7, #68]	; 0x44

	ADC_TypeDef* ADCX;
	ADCX = FIND_ADC_TYPE(Port, Pin);
 8000b76:	887b      	ldrh	r3, [r7, #2]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f000 f988 	bl	8000e90 <FIND_ADC_TYPE>
 8000b80:	6438      	str	r0, [r7, #64]	; 0x40

	uint32_t RCC_APB;
	RCC_APB = FIND_RCC_APB(ADCX);
 8000b82:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000b84:	f000 fa00 	bl	8000f88 <FIND_RCC_APB>
 8000b88:	63f8      	str	r0, [r7, #60]	; 0x3c

	uint8_t Channel;
	Channel = FIND_CHANNEL(Port, Pin);
 8000b8a:	887b      	ldrh	r3, [r7, #2]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f000 fa1c 	bl	8000fcc <FIND_CHANNEL>
 8000b94:	4603      	mov	r3, r0
 8000b96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    GPIO_InitTypeDef        GPIO_InitStructure;
    ADC_InitTypeDef         ADC_InitStructure;
    ADC_CommonInitTypeDef   ADC_CommonInitStructure;

    //Habilitacion del Clock para el puerto donde esta conectado el ADC:
    RCC_AHB1PeriphClockCmd(Clock, ENABLE);
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000b9e:	f7ff fe95 	bl	80008cc <RCC_AHB1PeriphClockCmd>

    //Configuracion del PIN del ADC como entrada ANALOGICA.
    GPIO_StructInit(&GPIO_InitStructure);
 8000ba2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fe76 	bl	8000898 <GPIO_StructInit>
    GPIO_InitStructure.GPIO_Pin     = Pin;
 8000bac:	887b      	ldrh	r3, [r7, #2]
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AN;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_NOPULL ;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    GPIO_Init(Port, &GPIO_InitStructure);
 8000bbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff fdda 	bl	800077c <GPIO_Init>

    //Activar ADC:
    RCC_APB2PeriphClockCmd(RCC_APB, ENABLE);
 8000bc8:	2101      	movs	r1, #1
 8000bca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000bcc:	f7ff febe 	bl	800094c <RCC_APB2PeriphClockCmd>

    //ADC Common Init:
    ADC_CommonStructInit(&ADC_CommonInitStructure);
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fc09 	bl	80003ec <ADC_CommonStructInit>
    ADC_CommonInitStructure.ADC_Mode                = ADC_Mode_Independent;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
    ADC_CommonInitStructure.ADC_Prescaler           = ADC_Prescaler_Div4; // max 36 MHz
 8000bde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be2:	60fb      	str	r3, [r7, #12]
    ADC_CommonInitStructure.ADC_DMAAccessMode       = ADC_DMAAccessMode_Disabled;
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
    ADC_CommonInitStructure.ADC_TwoSamplingDelay    = ADC_TwoSamplingDelay_5Cycles;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
    ADC_CommonInit(&ADC_CommonInitStructure);
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fbd3 	bl	800039c <ADC_CommonInit>

    //ADC Init:
    ADC_StructInit (&ADC_InitStructure);
 8000bf6:	f107 0318 	add.w	r3, r7, #24
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fbae 	bl	800035c <ADC_StructInit>
    ADC_InitStructure.ADC_Resolution             = ADC_Resolution_12b;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61bb      	str	r3, [r7, #24]
    ADC_InitStructure.ADC_ScanConvMode           = DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	773b      	strb	r3, [r7, #28]
    ADC_InitStructure.ADC_ContinuousConvMode     = DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	777b      	strb	r3, [r7, #29]
    ADC_InitStructure.ADC_ExternalTrigConvEdge   = ADC_ExternalTrigConvEdge_None;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
    ADC_InitStructure.ADC_DataAlign              = ADC_DataAlign_Right;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
    ADC_InitStructure.ADC_NbrOfConversion        = 1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    ADC_Init(ADCX, &ADC_InitStructure);
 8000c1a:	f107 0318 	add.w	r3, r7, #24
 8000c1e:	4619      	mov	r1, r3
 8000c20:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000c22:	f7ff fb45 	bl	80002b0 <ADC_Init>

    //Establecer la configuración de conversion:
    ADC_InjectedSequencerLengthConfig(ADCX, 1);
 8000c26:	2101      	movs	r1, #1
 8000c28:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000c2a:	f7ff fca2 	bl	8000572 <ADC_InjectedSequencerLengthConfig>
    ADC_SetInjectedOffset(ADCX, ADC_InjectedChannel_1, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2114      	movs	r1, #20
 8000c32:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000c34:	f7ff fcbf 	bl	80005b6 <ADC_SetInjectedOffset>
    ADC_InjectedChannelConfig(ADCX, Channel, 1, ADC_SampleTime_480Cycles);
 8000c38:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 8000c3c:	2307      	movs	r3, #7
 8000c3e:	2201      	movs	r2, #1
 8000c40:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000c42:	f7ff fc05 	bl	8000450 <ADC_InjectedChannelConfig>

    /* Poner en marcha ADC ----------------------------------------------------*/
    ADC_Cmd(ADCX, ENABLE);
 8000c46:	2101      	movs	r1, #1
 8000c48:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000c4a:	f7ff fbe5 	bl	8000418 <ADC_Cmd>
}
 8000c4e:	bf00      	nop
 8000c50:	3748      	adds	r7, #72	; 0x48
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <READ_ADC>:
		- ADCX		Nombre del ADC a inicializar. Ej: ADCX.
	* @ej
		- READ_ADC(ADCX);
******************************************************************************/
int32_t READ_ADC(GPIO_TypeDef* Port, uint16_t Pin)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	460b      	mov	r3, r1
 8000c60:	807b      	strh	r3, [r7, #2]
    uint32_t ADC_DATA;

    ADC_TypeDef* ADCX;
    ADCX = FIND_ADC_TYPE(Port, Pin);
 8000c62:	887b      	ldrh	r3, [r7, #2]
 8000c64:	4619      	mov	r1, r3
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f000 f912 	bl	8000e90 <FIND_ADC_TYPE>
 8000c6c:	60f8      	str	r0, [r7, #12]

    ADC_ClearFlag(ADCX, ADC_FLAG_JEOC);
 8000c6e:	2104      	movs	r1, #4
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f7ff fcfc 	bl	800066e <ADC_ClearFlag>
    ADC_SoftwareStartInjectedConv(ADCX);
 8000c76:	68f8      	ldr	r0, [r7, #12]
 8000c78:	f7ff fcb7 	bl	80005ea <ADC_SoftwareStartInjectedConv>
    while (ADC_GetFlagStatus(ADCX, ADC_FLAG_JEOC) == RESET);
 8000c7c:	bf00      	nop
 8000c7e:	2104      	movs	r1, #4
 8000c80:	68f8      	ldr	r0, [r7, #12]
 8000c82:	f7ff fcda 	bl	800063a <ADC_GetFlagStatus>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d0f8      	beq.n	8000c7e <READ_ADC+0x28>

    ADC_DATA = ADC_GetInjectedConversionValue(ADCX, ADC_InjectedChannel_1);
 8000c8c:	2114      	movs	r1, #20
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f7ff fcbb 	bl	800060a <ADC_GetInjectedConversionValue>
 8000c94:	4603      	mov	r3, r0
 8000c96:	60bb      	str	r3, [r7, #8]
    return ADC_DATA;
 8000c98:	68bb      	ldr	r3, [r7, #8]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <INIT_DAC_CONT>:

	* @ej
		- INIT_DAC_CONT(GPIOX, GPIO_Pin_X); //Inicialización del Pin PXXX como DAC.
******************************************************************************/
void INIT_DAC_CONT(GPIO_TypeDef* Port, uint16_t Pin)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIO clock */
	uint32_t Clock;
	Clock = FIND_CLOCK(Port);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f000 f8a3 	bl	8000dfc <FIND_CLOCK>
 8000cb6:	6178      	str	r0, [r7, #20]
	RCC_AHB1PeriphClockCmd(Clock, ENABLE);
 8000cb8:	2101      	movs	r1, #1
 8000cba:	6978      	ldr	r0, [r7, #20]
 8000cbc:	f7ff fe06 	bl	80008cc <RCC_AHB1PeriphClockCmd>

	/* Configura el Pin como salida Analogica */
	GPIO_InitStructure.GPIO_Pin = Pin;
 8000cc0:	887b      	ldrh	r3, [r7, #2]
 8000cc2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	743b      	strb	r3, [r7, #16]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	74fb      	strb	r3, [r7, #19]
	GPIO_Init(Port, &GPIO_InitStructure);
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff fd52 	bl	800077c <GPIO_Init>

	/* DAC: activar clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8000cd8:	2101      	movs	r1, #1
 8000cda:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000cde:	f7ff fe15 	bl	800090c <RCC_APB1PeriphClockCmd>

	/* DAC configuracion canal */
	DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <INIT_DAC_CONT+0x80>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
	DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <INIT_DAC_CONT+0x80>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	605a      	str	r2, [r3, #4]
	DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <INIT_DAC_CONT+0x80>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
	DAC_Init(FIND_DAC_CHANNEL(Port,Pin), &DAC_InitStructure);
 8000cf4:	887b      	ldrh	r3, [r7, #2]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 fa71 	bl	80011e0 <FIND_DAC_CHANNEL>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	4908      	ldr	r1, [pc, #32]	; (8000d24 <INIT_DAC_CONT+0x80>)
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fcc4 	bl	8000690 <DAC_Init>
	//**************************************************

	//DAC ON Channel 1
	DAC_Cmd(FIND_DAC_CHANNEL(Port,Pin), ENABLE);
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f000 fa67 	bl	80011e0 <FIND_DAC_CHANNEL>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2101      	movs	r1, #1
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fcee 	bl	80006f8 <DAC_Cmd>
}
 8000d1c:	bf00      	nop
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	2000007c 	.word	0x2000007c

08000d28 <DAC_CONT>:

	* @ej
		- INIT_DAC_CONT(GPIOX, GPIO_Pin_X); //Inicialización del Pin PXXX como DAC.
******************************************************************************/
void DAC_CONT(GPIO_TypeDef* Port, uint16_t Pin, int16_t MiliVolts)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	807b      	strh	r3, [r7, #2]
 8000d34:	4613      	mov	r3, r2
 8000d36:	803b      	strh	r3, [r7, #0]
	DAC_SetChannel2Data(DAC_Align_12b_R, MiliVolts);
 8000d38:	883b      	ldrh	r3, [r7, #0]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff fd01 	bl	8000744 <DAC_SetChannel2Data>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <INIT_TIM3>:
	* @param
	* @ej
		- INIT_TIM4();
******************************************************************************/
void INIT_TIM3()
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	/* TIM3 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8000d50:	2101      	movs	r1, #1
 8000d52:	2002      	movs	r0, #2
 8000d54:	f7ff fdda 	bl	800090c <RCC_APB1PeriphClockCmd>

	/* Enable the TIM3 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8000d58:	231d      	movs	r3, #29
 8000d5a:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000d64:	2301      	movs	r3, #1
 8000d66:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fa3e 	bl	80001ec <NVIC_Init>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <SET_TIM3>:

	* @ej
		- INIT_TIM4(GPIOX, GPIO_Pin_X); //Inicialización del Pin PXXX como TIMER4.
******************************************************************************/
void SET_TIM3(uint32_t TimeBase, uint32_t Freq)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
	uint16_t PrescalerValue = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	81fb      	strh	r3, [r7, #14]

	//Actualización de los valores del TIM4:
	SystemCoreClockUpdate();
 8000d86:	f000 fba1 	bl	80014cc <SystemCoreClockUpdate>
	TIM_ITConfig(TIM3, TIM_IT_Update, DISABLE);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4818      	ldr	r0, [pc, #96]	; (8000df0 <SET_TIM3+0x78>)
 8000d90:	f7ff fe88 	bl	8000aa4 <TIM_ITConfig>
	TIM_Cmd(TIM3, DISABLE);
 8000d94:	2100      	movs	r1, #0
 8000d96:	4816      	ldr	r0, [pc, #88]	; (8000df0 <SET_TIM3+0x78>)
 8000d98:	f7ff fe64 	bl	8000a64 <TIM_Cmd>

	/* Compute the prescaler value */
	PrescalerValue = (uint16_t) ((SystemCoreClock / 2) / TimeBase) - 1;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <SET_TIM3+0x7c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	085a      	lsrs	r2, r3, #1
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	3b01      	subs	r3, #1
 8000dac:	81fb      	strh	r3, [r7, #14]

	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = TimeBase / Freq - 1;
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db6:	3b01      	subs	r3, #1
 8000db8:	4a0f      	ldr	r2, [pc, #60]	; (8000df8 <SET_TIM3+0x80>)
 8000dba:	6053      	str	r3, [r2, #4]
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 8000dbc:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <SET_TIM3+0x80>)
 8000dbe:	89fb      	ldrh	r3, [r7, #14]
 8000dc0:	8013      	strh	r3, [r2, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <SET_TIM3+0x80>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	811a      	strh	r2, [r3, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <SET_TIM3+0x80>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	805a      	strh	r2, [r3, #2]

	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8000dce:	490a      	ldr	r1, [pc, #40]	; (8000df8 <SET_TIM3+0x80>)
 8000dd0:	4807      	ldr	r0, [pc, #28]	; (8000df0 <SET_TIM3+0x78>)
 8000dd2:	f7ff fddb 	bl	800098c <TIM_TimeBaseInit>

	/* TIM Interrupts enable */
	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <SET_TIM3+0x78>)
 8000ddc:	f7ff fe62 	bl	8000aa4 <TIM_ITConfig>

	/* TIM3 enable counter */
	TIM_Cmd(TIM3, ENABLE);
 8000de0:	2101      	movs	r1, #1
 8000de2:	4803      	ldr	r0, [pc, #12]	; (8000df0 <SET_TIM3+0x78>)
 8000de4:	f7ff fe3e 	bl	8000a64 <TIM_Cmd>
}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40000400 	.word	0x40000400
 8000df4:	2000002c 	.word	0x2000002c
 8000df8:	20000070 	.word	0x20000070

08000dfc <FIND_CLOCK>:

/*------------------------------------------------------------------------------
 FUNCIONES INTERNAS:
------------------------------------------------------------------------------*/
uint32_t FIND_CLOCK(GPIO_TypeDef* Port)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	uint32_t Clock;

	if		(Port == GPIOA) Clock = RCC_AHB1Periph_GPIOA;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a1b      	ldr	r2, [pc, #108]	; (8000e74 <FIND_CLOCK+0x78>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d102      	bne.n	8000e12 <FIND_CLOCK+0x16>
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	e028      	b.n	8000e64 <FIND_CLOCK+0x68>
	else if (Port == GPIOB) Clock = RCC_AHB1Periph_GPIOB;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a18      	ldr	r2, [pc, #96]	; (8000e78 <FIND_CLOCK+0x7c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d102      	bne.n	8000e20 <FIND_CLOCK+0x24>
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	e021      	b.n	8000e64 <FIND_CLOCK+0x68>
	else if (Port == GPIOC) Clock = RCC_AHB1Periph_GPIOC;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <FIND_CLOCK+0x80>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d102      	bne.n	8000e2e <FIND_CLOCK+0x32>
 8000e28:	2304      	movs	r3, #4
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	e01a      	b.n	8000e64 <FIND_CLOCK+0x68>
	else if (Port == GPIOD) Clock = RCC_AHB1Periph_GPIOD;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <FIND_CLOCK+0x84>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d102      	bne.n	8000e3c <FIND_CLOCK+0x40>
 8000e36:	2308      	movs	r3, #8
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	e013      	b.n	8000e64 <FIND_CLOCK+0x68>
	else if (Port == GPIOE) Clock = RCC_AHB1Periph_GPIOE;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <FIND_CLOCK+0x88>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d102      	bne.n	8000e4a <FIND_CLOCK+0x4e>
 8000e44:	2310      	movs	r3, #16
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	e00c      	b.n	8000e64 <FIND_CLOCK+0x68>
	else if (Port == GPIOF) Clock = RCC_AHB1Periph_GPIOF;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <FIND_CLOCK+0x8c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d102      	bne.n	8000e58 <FIND_CLOCK+0x5c>
 8000e52:	2320      	movs	r3, #32
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	e005      	b.n	8000e64 <FIND_CLOCK+0x68>
	else if (Port == GPIOG) Clock = RCC_AHB1Periph_GPIOG;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <FIND_CLOCK+0x90>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d101      	bne.n	8000e64 <FIND_CLOCK+0x68>
 8000e60:	2340      	movs	r3, #64	; 0x40
 8000e62:	60fb      	str	r3, [r7, #12]
	return Clock;
 8000e64:	68fb      	ldr	r3, [r7, #12]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40020000 	.word	0x40020000
 8000e78:	40020400 	.word	0x40020400
 8000e7c:	40020800 	.word	0x40020800
 8000e80:	40020c00 	.word	0x40020c00
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40021400 	.word	0x40021400
 8000e8c:	40021800 	.word	0x40021800

08000e90 <FIND_ADC_TYPE>:

ADC_TypeDef* FIND_ADC_TYPE (GPIO_TypeDef* Port, uint32_t Pin)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	ADC_TypeDef* ADCX;

	if 		((Port == GPIOA && (Pin == GPIO_Pin_0 || Pin == GPIO_Pin_1   || Pin == GPIO_Pin_2 ||
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a34      	ldr	r2, [pc, #208]	; (8000f70 <FIND_ADC_TYPE+0xe0>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d117      	bne.n	8000ed2 <FIND_ADC_TYPE+0x42>
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d034      	beq.n	8000f12 <FIND_ADC_TYPE+0x82>
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d031      	beq.n	8000f12 <FIND_ADC_TYPE+0x82>
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d02e      	beq.n	8000f12 <FIND_ADC_TYPE+0x82>
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	2b08      	cmp	r3, #8
 8000eb8:	d02b      	beq.n	8000f12 <FIND_ADC_TYPE+0x82>
								Pin == GPIO_Pin_3 || Pin == GPIO_Pin_4   || Pin == GPIO_Pin_5 ||
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	2b10      	cmp	r3, #16
 8000ebe:	d028      	beq.n	8000f12 <FIND_ADC_TYPE+0x82>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	2b20      	cmp	r3, #32
 8000ec4:	d025      	beq.n	8000f12 <FIND_ADC_TYPE+0x82>
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	2b40      	cmp	r3, #64	; 0x40
 8000eca:	d022      	beq.n	8000f12 <FIND_ADC_TYPE+0x82>
								Pin == GPIO_Pin_6 || Pin == GPIO_Pin_7)) ||
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	2b80      	cmp	r3, #128	; 0x80
 8000ed0:	d01f      	beq.n	8000f12 <FIND_ADC_TYPE+0x82>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a27      	ldr	r2, [pc, #156]	; (8000f74 <FIND_ADC_TYPE+0xe4>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d105      	bne.n	8000ee6 <FIND_ADC_TYPE+0x56>

			 (Port == GPIOB && (Pin == GPIO_Pin_0 || Pin == GPIO_Pin_1)) ||
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d018      	beq.n	8000f12 <FIND_ADC_TYPE+0x82>
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d015      	beq.n	8000f12 <FIND_ADC_TYPE+0x82>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a23      	ldr	r2, [pc, #140]	; (8000f78 <FIND_ADC_TYPE+0xe8>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d114      	bne.n	8000f18 <FIND_ADC_TYPE+0x88>

			 (Port == GPIOC && (Pin == GPIO_Pin_0 || Pin == GPIO_Pin_1   || Pin == GPIO_Pin_2 ||
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d00e      	beq.n	8000f12 <FIND_ADC_TYPE+0x82>
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d00b      	beq.n	8000f12 <FIND_ADC_TYPE+0x82>
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	2b04      	cmp	r3, #4
 8000efe:	d008      	beq.n	8000f12 <FIND_ADC_TYPE+0x82>
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2b08      	cmp	r3, #8
 8000f04:	d005      	beq.n	8000f12 <FIND_ADC_TYPE+0x82>
					  	  	  	Pin == GPIO_Pin_3 || Pin == GPIO_Pin_4   || Pin == GPIO_Pin_5)))
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2b10      	cmp	r3, #16
 8000f0a:	d002      	beq.n	8000f12 <FIND_ADC_TYPE+0x82>
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	2b20      	cmp	r3, #32
 8000f10:	d102      	bne.n	8000f18 <FIND_ADC_TYPE+0x88>
		ADCX = ADC1;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <FIND_ADC_TYPE+0xec>)
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	e023      	b.n	8000f60 <FIND_ADC_TYPE+0xd0>

	else if ((Port == GPIOF && (Pin == GPIO_Pin_3 || Pin == GPIO_Pin_4   || Pin == GPIO_Pin_5 ||
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <FIND_ADC_TYPE+0xf0>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d11d      	bne.n	8000f5c <FIND_ADC_TYPE+0xcc>
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d017      	beq.n	8000f56 <FIND_ADC_TYPE+0xc6>
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	2b10      	cmp	r3, #16
 8000f2a:	d014      	beq.n	8000f56 <FIND_ADC_TYPE+0xc6>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	2b20      	cmp	r3, #32
 8000f30:	d011      	beq.n	8000f56 <FIND_ADC_TYPE+0xc6>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	2b40      	cmp	r3, #64	; 0x40
 8000f36:	d00e      	beq.n	8000f56 <FIND_ADC_TYPE+0xc6>
								Pin == GPIO_Pin_6 || Pin == GPIO_Pin_7   || Pin == GPIO_Pin_8 ||
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	2b80      	cmp	r3, #128	; 0x80
 8000f3c:	d00b      	beq.n	8000f56 <FIND_ADC_TYPE+0xc6>
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f44:	d007      	beq.n	8000f56 <FIND_ADC_TYPE+0xc6>
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f4c:	d003      	beq.n	8000f56 <FIND_ADC_TYPE+0xc6>
								Pin == GPIO_Pin_9 || Pin == GPIO_Pin_10)))
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f54:	d102      	bne.n	8000f5c <FIND_ADC_TYPE+0xcc>
		ADCX = ADC3;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <FIND_ADC_TYPE+0xf4>)
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	e001      	b.n	8000f60 <FIND_ADC_TYPE+0xd0>

	else
		ADCX = NULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]

	return ADCX;
 8000f60:	68fb      	ldr	r3, [r7, #12]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40020400 	.word	0x40020400
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	40012000 	.word	0x40012000
 8000f80:	40021400 	.word	0x40021400
 8000f84:	40012200 	.word	0x40012200

08000f88 <FIND_RCC_APB>:

uint32_t FIND_RCC_APB(ADC_TypeDef* ADCX)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	uint32_t RCC_APB;

	if 		(ADCX == ADC1) RCC_APB = RCC_APB2Periph_ADC1;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a0c      	ldr	r2, [pc, #48]	; (8000fc4 <FIND_RCC_APB+0x3c>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d103      	bne.n	8000fa0 <FIND_RCC_APB+0x18>
 8000f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	e009      	b.n	8000fb4 <FIND_RCC_APB+0x2c>
	else if (ADCX == ADC3) RCC_APB = RCC_APB2Periph_ADC3;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a09      	ldr	r2, [pc, #36]	; (8000fc8 <FIND_RCC_APB+0x40>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d103      	bne.n	8000fb0 <FIND_RCC_APB+0x28>
 8000fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	e001      	b.n	8000fb4 <FIND_RCC_APB+0x2c>
	else 				   RCC_APB = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]

	return RCC_APB;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40012000 	.word	0x40012000
 8000fc8:	40012200 	.word	0x40012200

08000fcc <FIND_CHANNEL>:

uint8_t FIND_CHANNEL(GPIO_TypeDef* Port, uint32_t Pin)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	uint8_t Channel;

	if 		(Port == GPIOA && Pin == GPIO_Pin_0)  Channel = ADC_Channel_0;  else if (Port == GPIOA && Pin == GPIO_Pin_1)  Channel = ADC_Channel_1;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a7d      	ldr	r2, [pc, #500]	; (80011d0 <FIND_CHANNEL+0x204>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d105      	bne.n	8000fea <FIND_CHANNEL+0x1e>
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d102      	bne.n	8000fea <FIND_CHANNEL+0x1e>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	e0ea      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a78      	ldr	r2, [pc, #480]	; (80011d0 <FIND_CHANNEL+0x204>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d105      	bne.n	8000ffe <FIND_CHANNEL+0x32>
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d102      	bne.n	8000ffe <FIND_CHANNEL+0x32>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	e0e0      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOA && Pin == GPIO_Pin_2)  Channel = ADC_Channel_2;  else if (Port == GPIOA && Pin == GPIO_Pin_3)  Channel = ADC_Channel_3;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a73      	ldr	r2, [pc, #460]	; (80011d0 <FIND_CHANNEL+0x204>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d105      	bne.n	8001012 <FIND_CHANNEL+0x46>
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	2b04      	cmp	r3, #4
 800100a:	d102      	bne.n	8001012 <FIND_CHANNEL+0x46>
 800100c:	2302      	movs	r3, #2
 800100e:	73fb      	strb	r3, [r7, #15]
 8001010:	e0d6      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a6e      	ldr	r2, [pc, #440]	; (80011d0 <FIND_CHANNEL+0x204>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d105      	bne.n	8001026 <FIND_CHANNEL+0x5a>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2b08      	cmp	r3, #8
 800101e:	d102      	bne.n	8001026 <FIND_CHANNEL+0x5a>
 8001020:	2303      	movs	r3, #3
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	e0cc      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOA && Pin == GPIO_Pin_4)  Channel = ADC_Channel_4;  else if (Port == GPIOA && Pin == GPIO_Pin_5)  Channel = ADC_Channel_5;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a69      	ldr	r2, [pc, #420]	; (80011d0 <FIND_CHANNEL+0x204>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d105      	bne.n	800103a <FIND_CHANNEL+0x6e>
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	2b10      	cmp	r3, #16
 8001032:	d102      	bne.n	800103a <FIND_CHANNEL+0x6e>
 8001034:	2304      	movs	r3, #4
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e0c2      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a64      	ldr	r2, [pc, #400]	; (80011d0 <FIND_CHANNEL+0x204>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d105      	bne.n	800104e <FIND_CHANNEL+0x82>
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	2b20      	cmp	r3, #32
 8001046:	d102      	bne.n	800104e <FIND_CHANNEL+0x82>
 8001048:	2305      	movs	r3, #5
 800104a:	73fb      	strb	r3, [r7, #15]
 800104c:	e0b8      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOA && Pin == GPIO_Pin_6)  Channel = ADC_Channel_6;  else if (Port == GPIOA && Pin == GPIO_Pin_7)  Channel = ADC_Channel_7;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a5f      	ldr	r2, [pc, #380]	; (80011d0 <FIND_CHANNEL+0x204>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d105      	bne.n	8001062 <FIND_CHANNEL+0x96>
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	2b40      	cmp	r3, #64	; 0x40
 800105a:	d102      	bne.n	8001062 <FIND_CHANNEL+0x96>
 800105c:	2306      	movs	r3, #6
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e0ae      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a5a      	ldr	r2, [pc, #360]	; (80011d0 <FIND_CHANNEL+0x204>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d105      	bne.n	8001076 <FIND_CHANNEL+0xaa>
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	2b80      	cmp	r3, #128	; 0x80
 800106e:	d102      	bne.n	8001076 <FIND_CHANNEL+0xaa>
 8001070:	2307      	movs	r3, #7
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	e0a4      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOB && Pin == GPIO_Pin_0)  Channel = ADC_Channel_8;  else if (Port == GPIOB && Pin == GPIO_Pin_1)  Channel = ADC_Channel_9;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a56      	ldr	r2, [pc, #344]	; (80011d4 <FIND_CHANNEL+0x208>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d105      	bne.n	800108a <FIND_CHANNEL+0xbe>
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d102      	bne.n	800108a <FIND_CHANNEL+0xbe>
 8001084:	2308      	movs	r3, #8
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	e09a      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a51      	ldr	r2, [pc, #324]	; (80011d4 <FIND_CHANNEL+0x208>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d105      	bne.n	800109e <FIND_CHANNEL+0xd2>
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d102      	bne.n	800109e <FIND_CHANNEL+0xd2>
 8001098:	2309      	movs	r3, #9
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e090      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOC && Pin == GPIO_Pin_0)  Channel = ADC_Channel_10; else if (Port == GPIOC && Pin == GPIO_Pin_1)  Channel = ADC_Channel_11;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4d      	ldr	r2, [pc, #308]	; (80011d8 <FIND_CHANNEL+0x20c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d105      	bne.n	80010b2 <FIND_CHANNEL+0xe6>
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d102      	bne.n	80010b2 <FIND_CHANNEL+0xe6>
 80010ac:	230a      	movs	r3, #10
 80010ae:	73fb      	strb	r3, [r7, #15]
 80010b0:	e086      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a48      	ldr	r2, [pc, #288]	; (80011d8 <FIND_CHANNEL+0x20c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d105      	bne.n	80010c6 <FIND_CHANNEL+0xfa>
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d102      	bne.n	80010c6 <FIND_CHANNEL+0xfa>
 80010c0:	230b      	movs	r3, #11
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e07c      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOC && Pin == GPIO_Pin_2)  Channel = ADC_Channel_12; else if (Port == GPIOC && Pin == GPIO_Pin_3)  Channel = ADC_Channel_13;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a43      	ldr	r2, [pc, #268]	; (80011d8 <FIND_CHANNEL+0x20c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d105      	bne.n	80010da <FIND_CHANNEL+0x10e>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d102      	bne.n	80010da <FIND_CHANNEL+0x10e>
 80010d4:	230c      	movs	r3, #12
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e072      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a3e      	ldr	r2, [pc, #248]	; (80011d8 <FIND_CHANNEL+0x20c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d105      	bne.n	80010ee <FIND_CHANNEL+0x122>
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d102      	bne.n	80010ee <FIND_CHANNEL+0x122>
 80010e8:	230d      	movs	r3, #13
 80010ea:	73fb      	strb	r3, [r7, #15]
 80010ec:	e068      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOC && Pin == GPIO_Pin_4)  Channel = ADC_Channel_14;	else if (Port == GPIOC && Pin == GPIO_Pin_5)  Channel = ADC_Channel_15;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a39      	ldr	r2, [pc, #228]	; (80011d8 <FIND_CHANNEL+0x20c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d105      	bne.n	8001102 <FIND_CHANNEL+0x136>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	2b10      	cmp	r3, #16
 80010fa:	d102      	bne.n	8001102 <FIND_CHANNEL+0x136>
 80010fc:	230e      	movs	r3, #14
 80010fe:	73fb      	strb	r3, [r7, #15]
 8001100:	e05e      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a34      	ldr	r2, [pc, #208]	; (80011d8 <FIND_CHANNEL+0x20c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d105      	bne.n	8001116 <FIND_CHANNEL+0x14a>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	2b20      	cmp	r3, #32
 800110e:	d102      	bne.n	8001116 <FIND_CHANNEL+0x14a>
 8001110:	230f      	movs	r3, #15
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	e054      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOF && Pin == GPIO_Pin_3)  Channel = ADC_Channel_9;	else if (Port == GPIOF && Pin == GPIO_Pin_4)  Channel = ADC_Channel_14;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a30      	ldr	r2, [pc, #192]	; (80011dc <FIND_CHANNEL+0x210>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d105      	bne.n	800112a <FIND_CHANNEL+0x15e>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	2b08      	cmp	r3, #8
 8001122:	d102      	bne.n	800112a <FIND_CHANNEL+0x15e>
 8001124:	2309      	movs	r3, #9
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	e04a      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a2b      	ldr	r2, [pc, #172]	; (80011dc <FIND_CHANNEL+0x210>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d105      	bne.n	800113e <FIND_CHANNEL+0x172>
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2b10      	cmp	r3, #16
 8001136:	d102      	bne.n	800113e <FIND_CHANNEL+0x172>
 8001138:	230e      	movs	r3, #14
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e040      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOF && Pin == GPIO_Pin_5)  Channel = ADC_Channel_15;	else if (Port == GPIOF && Pin == GPIO_Pin_6)  Channel = ADC_Channel_4;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a26      	ldr	r2, [pc, #152]	; (80011dc <FIND_CHANNEL+0x210>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d105      	bne.n	8001152 <FIND_CHANNEL+0x186>
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2b20      	cmp	r3, #32
 800114a:	d102      	bne.n	8001152 <FIND_CHANNEL+0x186>
 800114c:	230f      	movs	r3, #15
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	e036      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a21      	ldr	r2, [pc, #132]	; (80011dc <FIND_CHANNEL+0x210>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d105      	bne.n	8001166 <FIND_CHANNEL+0x19a>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	2b40      	cmp	r3, #64	; 0x40
 800115e:	d102      	bne.n	8001166 <FIND_CHANNEL+0x19a>
 8001160:	2304      	movs	r3, #4
 8001162:	73fb      	strb	r3, [r7, #15]
 8001164:	e02c      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOF && Pin == GPIO_Pin_7)  Channel = ADC_Channel_5;	else if (Port == GPIOF && Pin == GPIO_Pin_8)  Channel = ADC_Channel_6;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a1c      	ldr	r2, [pc, #112]	; (80011dc <FIND_CHANNEL+0x210>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d105      	bne.n	800117a <FIND_CHANNEL+0x1ae>
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	2b80      	cmp	r3, #128	; 0x80
 8001172:	d102      	bne.n	800117a <FIND_CHANNEL+0x1ae>
 8001174:	2305      	movs	r3, #5
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	e022      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a17      	ldr	r2, [pc, #92]	; (80011dc <FIND_CHANNEL+0x210>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d106      	bne.n	8001190 <FIND_CHANNEL+0x1c4>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001188:	d102      	bne.n	8001190 <FIND_CHANNEL+0x1c4>
 800118a:	2306      	movs	r3, #6
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	e017      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
	else if (Port == GPIOF && Pin == GPIO_Pin_9)  Channel = ADC_Channel_7;	else if (Port == GPIOF && Pin == GPIO_Pin_10) Channel = ADC_Channel_8;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <FIND_CHANNEL+0x210>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d106      	bne.n	80011a6 <FIND_CHANNEL+0x1da>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800119e:	d102      	bne.n	80011a6 <FIND_CHANNEL+0x1da>
 80011a0:	2307      	movs	r3, #7
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	e00c      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a0c      	ldr	r2, [pc, #48]	; (80011dc <FIND_CHANNEL+0x210>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d106      	bne.n	80011bc <FIND_CHANNEL+0x1f0>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b4:	d102      	bne.n	80011bc <FIND_CHANNEL+0x1f0>
 80011b6:	2308      	movs	r3, #8
 80011b8:	73fb      	strb	r3, [r7, #15]
 80011ba:	e001      	b.n	80011c0 <FIND_CHANNEL+0x1f4>
	else 										  Channel = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	73fb      	strb	r3, [r7, #15]

	return Channel;
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40020800 	.word	0x40020800
 80011dc:	40021400 	.word	0x40021400

080011e0 <FIND_DAC_CHANNEL>:

uint32_t FIND_DAC_CHANNEL(GPIO_TypeDef* Port, uint32_t Pin)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
	if(Port == GPIOA && Pin == GPIO_Pin_5) return DAC_Channel_2;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <FIND_DAC_CHANNEL+0x2c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d104      	bne.n	80011fc <FIND_DAC_CHANNEL+0x1c>
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	2b20      	cmp	r3, #32
 80011f6:	d101      	bne.n	80011fc <FIND_DAC_CHANNEL+0x1c>
 80011f8:	2310      	movs	r3, #16
 80011fa:	e000      	b.n	80011fe <FIND_DAC_CHANNEL+0x1e>
	else return 0;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40020000 	.word	0x40020000

08001210 <main>:
float firOut = 0.0f;
int32_t signalIn = 0;
int32_t signalOut = 0;

int main(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
/*------------------------------------------------------------------------------
CONFIGURACION DEL MICRO:
------------------------------------------------------------------------------*/
	SystemInit();
 8001214:	f000 f924 	bl	8001460 <SystemInit>

	/*Inicializacion del ADC:*/
	INIT_ADC(ADC_Port, ADC_Pin);
 8001218:	2101      	movs	r1, #1
 800121a:	480a      	ldr	r0, [pc, #40]	; (8001244 <main+0x34>)
 800121c:	f7ff fca1 	bl	8000b62 <INIT_ADC>

	/*Inicializacion del DAC:*/
	INIT_DAC_CONT(DAC_Port, DAC_Pin);
 8001220:	2120      	movs	r1, #32
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <main+0x38>)
 8001224:	f7ff fd3e 	bl	8000ca4 <INIT_DAC_CONT>

	/*Inicialización del TIM3:*/
	INIT_TIM3();
 8001228:	f7ff fd8f 	bl	8000d4a <INIT_TIM3>
	SET_TIM3(TimeBase, FS);
 800122c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001230:	4806      	ldr	r0, [pc, #24]	; (800124c <main+0x3c>)
 8001232:	f7ff fda1 	bl	8000d78 <SET_TIM3>
BUCLE PRINCIPAL:
------------------------------------------------------------------------------*/
	while(1)
	{
		/*Task Scheduler:*/
		if (adcReady == 1)
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <main+0x40>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d1fb      	bne.n	8001236 <main+0x26>
			ADC_PROCESSING();
 800123e:	f000 f81f 	bl	8001280 <ADC_PROCESSING>
		if (adcReady == 1)
 8001242:	e7f8      	b.n	8001236 <main+0x26>
 8001244:	40020800 	.word	0x40020800
 8001248:	40020000 	.word	0x40020000
 800124c:	00030d40 	.word	0x00030d40
 8001250:	2000005c 	.word	0x2000005c

08001254 <TIM3_IRQHandler>:
}
/*------------------------------------------------------------------------------
INTERRUPCIONES:
------------------------------------------------------------------------------*/
/*Interrupcion al vencimiento de cuenta de TIM3 cada 1/FS:*/
void TIM3_IRQHandler(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET) {
 8001258:	2101      	movs	r1, #1
 800125a:	4807      	ldr	r0, [pc, #28]	; (8001278 <TIM3_IRQHandler+0x24>)
 800125c:	f7ff fc46 	bl	8000aec <TIM_GetITStatus>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d006      	beq.n	8001274 <TIM3_IRQHandler+0x20>
        /*Set de la variable del TS:*/
        adcReady = 1;
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <TIM3_IRQHandler+0x28>)
 8001268:	2201      	movs	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]

        TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 800126c:	2101      	movs	r1, #1
 800126e:	4802      	ldr	r0, [pc, #8]	; (8001278 <TIM3_IRQHandler+0x24>)
 8001270:	f7ff fc66 	bl	8000b40 <TIM_ClearITPendingBit>
	}
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40000400 	.word	0x40000400
 800127c:	2000005c 	.word	0x2000005c

08001280 <ADC_PROCESSING>:
/*------------------------------------------------------------------------------
TAREAS:
------------------------------------------------------------------------------*/
/*Procesamiento de los datos del ADC:*/
void ADC_PROCESSING()
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
    /*Reset de la variable del TS:*/
    adcReady = 0;
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <ADC_PROCESSING+0x78>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]

	/*Conversion del dato del AD:*/
	signalIn = READ_ADC(ADC_Port, ADC_Pin) - 2048;
 800128a:	2101      	movs	r1, #1
 800128c:	481b      	ldr	r0, [pc, #108]	; (80012fc <ADC_PROCESSING+0x7c>)
 800128e:	f7ff fce2 	bl	8000c56 <READ_ADC>
 8001292:	4603      	mov	r3, r0
 8001294:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001298:	4a19      	ldr	r2, [pc, #100]	; (8001300 <ADC_PROCESSING+0x80>)
 800129a:	6013      	str	r3, [r2, #0]

	/*Normalizado 0.0 a 1.0. */		/*	-0.5 a 0.5	*/
	firIn = ((float)signalIn) / 4096;
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <ADC_PROCESSING+0x80>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a8:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001304 <ADC_PROCESSING+0x84>
 80012ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <ADC_PROCESSING+0x88>)
 80012b2:	edc3 7a00 	vstr	s15, [r3]

	/*Llamado a la función de proceso FIR:*/
	filter_fir_f32(&firIn, &firOut, n, Coeff_f32);
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <ADC_PROCESSING+0x8c>)
 80012b8:	220b      	movs	r2, #11
 80012ba:	4915      	ldr	r1, [pc, #84]	; (8001310 <ADC_PROCESSING+0x90>)
 80012bc:	4812      	ldr	r0, [pc, #72]	; (8001308 <ADC_PROCESSING+0x88>)
 80012be:	f000 f82f 	bl	8001320 <filter_fir_f32>

	/*Desnormalizado 0 a 4096:*/
	signalOut = (firOut * 4096) + 2048;
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <ADC_PROCESSING+0x90>)
 80012c4:	edd3 7a00 	vldr	s15, [r3]
 80012c8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001304 <ADC_PROCESSING+0x84>
 80012cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001314 <ADC_PROCESSING+0x94>
 80012d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012dc:	ee17 2a90 	vmov	r2, s15
 80012e0:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <ADC_PROCESSING+0x98>)
 80012e2:	601a      	str	r2, [r3, #0]

	/*Conversion del dato del DA:*/
	DAC_CONT(DAC_Port, DAC_Pin, (uint16_t) signalOut);
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <ADC_PROCESSING+0x98>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	461a      	mov	r2, r3
 80012ec:	2120      	movs	r1, #32
 80012ee:	480b      	ldr	r0, [pc, #44]	; (800131c <ADC_PROCESSING+0x9c>)
 80012f0:	f7ff fd1a 	bl	8000d28 <DAC_CONT>
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000005c 	.word	0x2000005c
 80012fc:	40020800 	.word	0x40020800
 8001300:	20000068 	.word	0x20000068
 8001304:	45800000 	.word	0x45800000
 8001308:	20000060 	.word	0x20000060
 800130c:	20000000 	.word	0x20000000
 8001310:	20000064 	.word	0x20000064
 8001314:	45000000 	.word	0x45000000
 8001318:	2000006c 	.word	0x2000006c
 800131c:	40020000 	.word	0x40020000

08001320 <filter_fir_f32>:
/*------------------------------------------------------------------------------
FUNCIONES LOCALES:
------------------------------------------------------------------------------*/
/*Proceso del FIR: Y(n) = A0*X(n):*/
void filter_fir_f32(float* pSrc, float* pDst, uint32_t N_COEF, float* pCoeff)
{
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	603b      	str	r3, [r7, #0]
	float ACUM;
	uint16_t k;

	/*Senal de Entrada:*/
	ACUM = *pSrc;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	617b      	str	r3, [r7, #20]

	/*X[n] = Ultimo elemento del buffer:*/
	firState_f32[N_COEF] = ACUM;
 8001334:	4a1d      	ldr	r2, [pc, #116]	; (80013ac <filter_fir_f32+0x8c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	601a      	str	r2, [r3, #0]
	/*Blanquear Acumulador:*/
	ACUM = 0.0f;
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	617b      	str	r3, [r7, #20]

	/*Ciclo de K = 0 a NUM_COEF:*/
	for(k = 0; k < N_COEF; k++)
 8001346:	2300      	movs	r3, #0
 8001348:	827b      	strh	r3, [r7, #18]
 800134a:	e021      	b.n	8001390 <filter_fir_f32+0x70>
	{
		/*Convolucion:*/
		ACUM = ACUM + pCoeff[k] * firState_f32[k];
 800134c:	8a7b      	ldrh	r3, [r7, #18]
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	4413      	add	r3, r2
 8001354:	ed93 7a00 	vldr	s14, [r3]
 8001358:	8a7b      	ldrh	r3, [r7, #18]
 800135a:	4a14      	ldr	r2, [pc, #80]	; (80013ac <filter_fir_f32+0x8c>)
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	edd3 7a00 	vldr	s15, [r3]
 8001364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001368:	ed97 7a05 	vldr	s14, [r7, #20]
 800136c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001370:	edc7 7a05 	vstr	s15, [r7, #20]
		/*Corrimiento de Datos:*/
		firState_f32[k] = firState_f32[k+1];
 8001374:	8a7b      	ldrh	r3, [r7, #18]
 8001376:	8a7a      	ldrh	r2, [r7, #18]
 8001378:	3201      	adds	r2, #1
 800137a:	490c      	ldr	r1, [pc, #48]	; (80013ac <filter_fir_f32+0x8c>)
 800137c:	0092      	lsls	r2, r2, #2
 800137e:	440a      	add	r2, r1
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	490a      	ldr	r1, [pc, #40]	; (80013ac <filter_fir_f32+0x8c>)
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	601a      	str	r2, [r3, #0]
	for(k = 0; k < N_COEF; k++)
 800138a:	8a7b      	ldrh	r3, [r7, #18]
 800138c:	3301      	adds	r3, #1
 800138e:	827b      	strh	r3, [r7, #18]
 8001390:	8a7a      	ldrh	r2, [r7, #18]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	d3d9      	bcc.n	800134c <filter_fir_f32+0x2c>
	}

	/*Senal de Salida:*/
	*pDst = ACUM;
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	601a      	str	r2, [r3, #0]
}
 800139e:	bf00      	nop
 80013a0:	371c      	adds	r7, #28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	200000a8 	.word	0x200000a8

080013b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e8 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013b6:	e003      	b.n	80013c0 <LoopCopyDataInit>

080013b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013be:	3104      	adds	r1, #4

080013c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013c8:	d3f6      	bcc.n	80013b8 <CopyDataInit>
  ldr  r2, =_sbss
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013cc:	e002      	b.n	80013d4 <LoopFillZerobss>

080013ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013d0:	f842 3b04 	str.w	r3, [r2], #4

080013d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013d8:	d3f9      	bcc.n	80013ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013da:	f000 f841 	bl	8001460 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013de:	f000 f96d 	bl	80016bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e2:	f7ff ff15 	bl	8001210 <main>
  bx  lr    
 80013e6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013e8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80013ec:	08001724 	.word	0x08001724
  ldr  r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013f4:	20000040 	.word	0x20000040
  ldr  r2, =_sbss
 80013f8:	20000040 	.word	0x20000040
  ldr  r3, = _ebss
 80013fc:	200000d8 	.word	0x200000d8

08001400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC_IRQHandler>

08001402 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001414:	e7fe      	b.n	8001414 <HardFault_Handler+0x4>

08001416 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800141a:	e7fe      	b.n	800141a <MemManage_Handler+0x4>

0800141c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001420:	e7fe      	b.n	8001420 <BusFault_Handler+0x4>

08001422 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001426:	e7fe      	b.n	8001426 <UsageFault_Handler+0x4>

08001428 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001464:	4a16      	ldr	r2, [pc, #88]	; (80014c0 <SystemInit+0x60>)
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <SystemInit+0x60>)
 8001468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800146c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001474:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <SystemInit+0x64>)
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <SystemInit+0x64>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <SystemInit+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001486:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <SystemInit+0x64>)
 8001488:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <SystemInit+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001494:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <SystemInit+0x64>)
 8001498:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <SystemInit+0x68>)
 800149a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800149c:	4a09      	ldr	r2, [pc, #36]	; (80014c4 <SystemInit+0x64>)
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <SystemInit+0x64>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <SystemInit+0x64>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80014ae:	f000 f889 	bl	80015c4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014b2:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <SystemInit+0x60>)
 80014b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014b8:	609a      	str	r2, [r3, #8]
#endif
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00
 80014c4:	40023800 	.word	0x40023800
 80014c8:	24003010 	.word	0x24003010

080014cc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	2302      	movs	r3, #2
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	2302      	movs	r3, #2
 80014e4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80014e6:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <SystemCoreClockUpdate+0xe4>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d007      	beq.n	8001506 <SystemCoreClockUpdate+0x3a>
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d009      	beq.n	800150e <SystemCoreClockUpdate+0x42>
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d13d      	bne.n	800157a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80014fe:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <SystemCoreClockUpdate+0xe8>)
 8001500:	4a2d      	ldr	r2, [pc, #180]	; (80015b8 <SystemCoreClockUpdate+0xec>)
 8001502:	601a      	str	r2, [r3, #0]
      break;
 8001504:	e03d      	b.n	8001582 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001506:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <SystemCoreClockUpdate+0xe8>)
 8001508:	4a2c      	ldr	r2, [pc, #176]	; (80015bc <SystemCoreClockUpdate+0xf0>)
 800150a:	601a      	str	r2, [r3, #0]
      break;
 800150c:	e039      	b.n	8001582 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800150e:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <SystemCoreClockUpdate+0xe4>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	0d9b      	lsrs	r3, r3, #22
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800151a:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <SystemCoreClockUpdate+0xe4>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001522:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00c      	beq.n	8001544 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800152a:	4a24      	ldr	r2, [pc, #144]	; (80015bc <SystemCoreClockUpdate+0xf0>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	4a1f      	ldr	r2, [pc, #124]	; (80015b0 <SystemCoreClockUpdate+0xe4>)
 8001534:	6852      	ldr	r2, [r2, #4]
 8001536:	0992      	lsrs	r2, r2, #6
 8001538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800153c:	fb02 f303 	mul.w	r3, r2, r3
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	e00b      	b.n	800155c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001544:	4a1c      	ldr	r2, [pc, #112]	; (80015b8 <SystemCoreClockUpdate+0xec>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	fbb2 f3f3 	udiv	r3, r2, r3
 800154c:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <SystemCoreClockUpdate+0xe4>)
 800154e:	6852      	ldr	r2, [r2, #4]
 8001550:	0992      	lsrs	r2, r2, #6
 8001552:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001556:	fb02 f303 	mul.w	r3, r2, r3
 800155a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <SystemCoreClockUpdate+0xe4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	0c1b      	lsrs	r3, r3, #16
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	3301      	adds	r3, #1
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	fbb2 f3f3 	udiv	r3, r2, r3
 8001574:	4a0f      	ldr	r2, [pc, #60]	; (80015b4 <SystemCoreClockUpdate+0xe8>)
 8001576:	6013      	str	r3, [r2, #0]
      break;
 8001578:	e003      	b.n	8001582 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <SystemCoreClockUpdate+0xe8>)
 800157c:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <SystemCoreClockUpdate+0xec>)
 800157e:	601a      	str	r2, [r3, #0]
      break;
 8001580:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <SystemCoreClockUpdate+0xe4>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	f003 030f 	and.w	r3, r3, #15
 800158c:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <SystemCoreClockUpdate+0xf4>)
 800158e:	5cd3      	ldrb	r3, [r2, r3]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <SystemCoreClockUpdate+0xe8>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	fa22 f303 	lsr.w	r3, r2, r3
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <SystemCoreClockUpdate+0xe8>)
 80015a0:	6013      	str	r3, [r2, #0]
}
 80015a2:	bf00      	nop
 80015a4:	371c      	adds	r7, #28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800
 80015b4:	2000002c 	.word	0x2000002c
 80015b8:	00f42400 	.word	0x00f42400
 80015bc:	007a1200 	.word	0x007a1200
 80015c0:	20000030 	.word	0x20000030

080015c4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80015d2:	4a36      	ldr	r2, [pc, #216]	; (80016ac <SetSysClock+0xe8>)
 80015d4:	4b35      	ldr	r3, [pc, #212]	; (80016ac <SetSysClock+0xe8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80015de:	4b33      	ldr	r3, [pc, #204]	; (80016ac <SetSysClock+0xe8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3301      	adds	r3, #1
 80015ec:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d103      	bne.n	80015fc <SetSysClock+0x38>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80015fa:	d1f0      	bne.n	80015de <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80015fc:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <SetSysClock+0xe8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d002      	beq.n	800160e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001608:	2301      	movs	r3, #1
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	e001      	b.n	8001612 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800160e:	2300      	movs	r3, #0
 8001610:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d142      	bne.n	800169e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001618:	4a24      	ldr	r2, [pc, #144]	; (80016ac <SetSysClock+0xe8>)
 800161a:	4b24      	ldr	r3, [pc, #144]	; (80016ac <SetSysClock+0xe8>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001622:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001624:	4a22      	ldr	r2, [pc, #136]	; (80016b0 <SetSysClock+0xec>)
 8001626:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <SetSysClock+0xec>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800162e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001630:	4a1e      	ldr	r2, [pc, #120]	; (80016ac <SetSysClock+0xe8>)
 8001632:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <SetSysClock+0xe8>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001638:	4a1c      	ldr	r2, [pc, #112]	; (80016ac <SetSysClock+0xe8>)
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <SetSysClock+0xe8>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001642:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001644:	4a19      	ldr	r2, [pc, #100]	; (80016ac <SetSysClock+0xe8>)
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <SetSysClock+0xe8>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800164e:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001650:	4b16      	ldr	r3, [pc, #88]	; (80016ac <SetSysClock+0xe8>)
 8001652:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <SetSysClock+0xf0>)
 8001654:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001656:	4a15      	ldr	r2, [pc, #84]	; (80016ac <SetSysClock+0xe8>)
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <SetSysClock+0xe8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001660:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001662:	bf00      	nop
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <SetSysClock+0xe8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f9      	beq.n	8001664 <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <SetSysClock+0xf4>)
 8001672:	f240 7205 	movw	r2, #1797	; 0x705
 8001676:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001678:	4a0c      	ldr	r2, [pc, #48]	; (80016ac <SetSysClock+0xe8>)
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <SetSysClock+0xe8>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f023 0303 	bic.w	r3, r3, #3
 8001682:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001684:	4a09      	ldr	r2, [pc, #36]	; (80016ac <SetSysClock+0xe8>)
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <SetSysClock+0xe8>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f043 0302 	orr.w	r3, r3, #2
 800168e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001690:	bf00      	nop
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <SetSysClock+0xe8>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b08      	cmp	r3, #8
 800169c:	d1f9      	bne.n	8001692 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40007000 	.word	0x40007000
 80016b4:	07402d04 	.word	0x07402d04
 80016b8:	40023c00 	.word	0x40023c00

080016bc <__libc_init_array>:
 80016bc:	b570      	push	{r4, r5, r6, lr}
 80016be:	4e0d      	ldr	r6, [pc, #52]	; (80016f4 <__libc_init_array+0x38>)
 80016c0:	4c0d      	ldr	r4, [pc, #52]	; (80016f8 <__libc_init_array+0x3c>)
 80016c2:	1ba4      	subs	r4, r4, r6
 80016c4:	10a4      	asrs	r4, r4, #2
 80016c6:	2500      	movs	r5, #0
 80016c8:	42a5      	cmp	r5, r4
 80016ca:	d109      	bne.n	80016e0 <__libc_init_array+0x24>
 80016cc:	4e0b      	ldr	r6, [pc, #44]	; (80016fc <__libc_init_array+0x40>)
 80016ce:	4c0c      	ldr	r4, [pc, #48]	; (8001700 <__libc_init_array+0x44>)
 80016d0:	f000 f818 	bl	8001704 <_init>
 80016d4:	1ba4      	subs	r4, r4, r6
 80016d6:	10a4      	asrs	r4, r4, #2
 80016d8:	2500      	movs	r5, #0
 80016da:	42a5      	cmp	r5, r4
 80016dc:	d105      	bne.n	80016ea <__libc_init_array+0x2e>
 80016de:	bd70      	pop	{r4, r5, r6, pc}
 80016e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016e4:	4798      	blx	r3
 80016e6:	3501      	adds	r5, #1
 80016e8:	e7ee      	b.n	80016c8 <__libc_init_array+0xc>
 80016ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016ee:	4798      	blx	r3
 80016f0:	3501      	adds	r5, #1
 80016f2:	e7f2      	b.n	80016da <__libc_init_array+0x1e>
 80016f4:	0800171c 	.word	0x0800171c
 80016f8:	0800171c 	.word	0x0800171c
 80016fc:	0800171c 	.word	0x0800171c
 8001700:	08001720 	.word	0x08001720

08001704 <_init>:
 8001704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001706:	bf00      	nop
 8001708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800170a:	bc08      	pop	{r3}
 800170c:	469e      	mov	lr, r3
 800170e:	4770      	bx	lr

08001710 <_fini>:
 8001710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001712:	bf00      	nop
 8001714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001716:	bc08      	pop	{r3}
 8001718:	469e      	mov	lr, r3
 800171a:	4770      	bx	lr
